import telebot
import os
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Get TOKEN from environment variables
TOKEN = os.getenv("TOKEN")
if not TOKEN or ":" not in TOKEN:
    logging.error("Bot token is invalid or not found")
    raise ValueError("Bot token noto‚Äòg‚Äòri yoki topilmadi")

# Initialize bot
bot = telebot.TeleBot(TOKEN)

# Multilingual data with sub-items for sections
data = {
    "uz": {
        "welcome": "‚öúÔ∏è Cyber University davlat universiteti botiga xush kelibsiz!",
        "menu": ["üëë Universitet haqida", "üí≥ Aloqa", "üí∏ Magistratura", "üí∞ Bakalavr"],
        "about": "‚öôÔ∏è Cyber University ‚Äî O‚Äòzbekistonning raqamli kelajagiga yo‚Äòl ochuvchi zamonaviy oliy ta‚Äôlim dargohi.\n\n"
                 "O‚Äòzbekiston Respublikasi Prezidentining 2025-yil 20-yanvardagi PQ‚Äì14-sonli qaroriga asosan Cyber University tashkil etildi.\n\n"
                 "Qarorni o‚Äòqing! ü´µ https://lex.uz/uz/docs/-7332592",
        "contact": "üìû Aloqa:\n\n"
                   "Telegram: Cyber University rasmiy sahifasi\n"
                   "üåê Veb-sayt: csu.uz\n"
                   "üì∏ Instagram: instagram.com/csu.uz\n"
                   "üìò Facebook: www.facebook.com/profile.php?id=61577521082631\n"
                   "üíº LinkedIn: www.linkedin.com/company/csu_uz/\n"
                   "‚òéÔ∏è Murojaatlar uchun: 558885555",
        "bachelor": {
            "title": "üéì Bakalavriat yo‚Äònalishlari:",
            "items": [
                {"name": "Kiberxavfsizlik injiniringi: tarmoq va tizim xavfsizligi", "desc": "Tarmoq va tizim xavfsizligi bo‚Äòyicha mutaxassislar tayyorlash."},
                {"name": "Kompyuter injiniringi: sun‚Äôiy intellekt", "desc": "Sun‚Äôiy intellekt va mashinaviy o‚Äòqitish bo‚Äòyicha chuqur bilimlar."},
                {"name": "Kiberxavfsizlik injiniringi: internet ashyolari xavfsizligi", "desc": "IoT qurilmalarini xavfsizligini ta‚Äôminlash."},
                {"name": "Dasturiy injiniring: amaliy matematika va algoritmlashtirish", "desc": "Algoritmlar va dasturiy ta‚Äôminot ishlab chiqish."},
                {"name": "Yurisprudensiya: kiber huquq", "desc": "Raqamli muhitda huquqiy masalalar bo‚Äòyicha ta‚Äôlim."},
                {"name": "Yurisprudensiya: raqamli kriminalistika", "desc": "Kiberjinoyatlarni tergov qilish bo‚Äòyicha mutaxassislik."},
                {"name": "Menejment: kiberxavfsizlik menejmenti", "desc": "Kiberxavfsizlikni boshqarish va tashkil qilish."},
                {"name": "Iqtisodiyot: raqamli iqtisodiyot", "desc": "Raqamli iqtisodiyot va blokcheyn texnologiyalari."}
            ]
        },
        "master": {
            "title": "üéì Magistratura yo‚Äònalishlari:",
            "items": [
                {"name": "Axborot xavfsizligi", "desc": "Axborot tizimlarini himoya qilish bo‚Äòyicha chuqur bilimlar."},
                {"name": "Kiber huquq", "desc": "Raqamli huquq va kiberxavfsizlik qonunchiligi bo‚Äòyicha ta‚Äôlim."}
            ]
        },
        "home": "üè† Bosh sahifa",
        "back": "‚¨ÖÔ∏è Orqaga"
    },
    "ru": {
        "welcome": "‚öúÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ Cyber University!",
        "menu": ["üëë –û–± —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ", "üí≥ –ö–æ–Ω—Ç–∞–∫—Ç—ã", "üí∏ –ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞", "üí∞ –ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç"],
        "about": "‚öôÔ∏è Cyber University ‚Äî —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–µ –ø—É—Ç—å –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–µ –±—É–¥—É—â–µ–µ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞.\n\n"
                 "–ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω –æ—Ç 20 —è–Ω–≤–∞—Ä—è 2025 –≥–æ–¥–∞ ‚ÑñPQ‚Äì14 –±—ã–ª —Å–æ–∑–¥–∞–Ω Cyber University.\n\n"
                 "–ß–∏—Ç–∞–π—Ç–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ! ü´µ https://lex.uz/ru/docs/-7332592",
        "contact": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
                   "Telegram: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª Cyber University\n"
                   "üåê –°–∞–π—Ç: csu.uz\n"
                   "üì∏ Instagram: instagram.com/csu.uz\n"
                   "üìò Facebook: www.facebook.com/profile.php?id=61577521082631\n"
                   "üíº LinkedIn: www.linkedin.com/company/csu_uz/\n"
                   "‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: 558885555",
        "bachelor": {
            "title": "üéì –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç–∞:",
            "items": [
                {"name": "–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –∑–∞—â–∏—Ç–∞ —Å–µ—Ç–µ–π –∏ —Å–∏—Å—Ç–µ–º", "desc": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –∑–∞—â–∏—Ç–µ —Å–µ—Ç–µ–π –∏ —Å–∏—Å—Ç–µ–º."},
                {"name": "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è: –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "desc": "–ì–ª—É–±–æ–∫–∏–µ –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è."},
                {"name": "–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –≤–µ—â–µ–π", "desc": "–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ IoT."},
                {"name": "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è: –ø—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã", "desc": "–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è."},
                {"name": "–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è: –∫–∏–±–µ—Ä–ø—Ä–∞–≤–æ", "desc": "–û–±—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–≤—ã–º –∞—Å–ø–µ–∫—Ç–∞–º —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å—Ä–µ–¥—ã."},
                {"name": "–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è: —Ü–∏—Ñ—Ä–æ–≤–∞—è –∫—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏–∫–∞", "desc": "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é –∫–∏–±–µ—Ä–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π."},
                {"name": "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é", "desc": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."},
                {"name": "–≠–∫–æ–Ω–æ–º–∏–∫–∞: —Ü–∏—Ñ—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞", "desc": "–¶–∏—Ñ—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±–ª–æ–∫—á–µ–π–Ω."}
            ]
        },
        "master": {
            "title": "üéì –ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞:",
            "items": [
                {"name": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "desc": "–ì–ª—É–±–æ–∫–∏–µ –∑–Ω–∞–Ω–∏—è –ø–æ –∑–∞—â–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º."},
                {"name": "–ö–∏–±–µ—Ä–ø—Ä–∞–≤–æ", "desc": "–û–±—É—á–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."}
            ]
        },
        "home": "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é",
        "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    },
    "en": {
        "welcome": "‚öúÔ∏è Welcome to Cyber University State University bot!",
        "menu": ["üëë About University", "üí≥ Contact", "üí∏ Master Programs", "üí∞ Bachelor Programs"],
        "about": "‚öôÔ∏è Cyber University ‚Äî a modern higher education institution opening the way to Uzbekistan's digital future.\n\n"
                 "Cyber University was established based on the Presidential Decree of the Republic of Uzbekistan No. PQ‚Äì14, dated January 20, 2025.\n\n"
                 "Read the decree! ü´µ https://lex.uz/en/docs/-7332592",
        "contact": "üìû Contact:\n\n"
                   "Telegram: official Cyber University channel\n"
                   "üåê Website: csu.uz\n"
                   "üì∏ Instagram: instagram.com/csu.uz\n"
                   "üìò Facebook: www.facebook.com/profile.php?id=61577521082631\n"
                   "üíº LinkedIn: www.linkedin.com/company/csu_uz/\n"
                   "‚òéÔ∏è Phone: 558885555",
        "bachelor": {
            "title": "üéì Bachelor Programs:",
            "items": [
                {"name": "Cybersecurity Engineering: network and system security", "desc": "Training specialists in network and system security."},
                {"name": "Computer Engineering: artificial intelligence", "desc": "In-depth knowledge in artificial intelligence and machine learning."},
                {"name": "Cybersecurity Engineering: IoT security", "desc": "Ensuring the security of IoT devices."},
                {"name": "Software Engineering: applied mathematics and algorithms", "desc": "Algorithms and software development."},
                {"name": "Law: cyber law", "desc": "Education on legal aspects of the digital environment."},
                {"name": "Law: digital forensics", "desc": "Specialization in investigating cybercrimes."},
                {"name": "Management: cybersecurity management", "desc": "Managing and organizing cybersecurity."},
                {"name": "Economics: digital economy", "desc": "Digital economy and blockchain technologies."}
            ]
        },
        "master": {
            "title": "üéì Master Programs:",
            "items": [
                {"name": "Information Security", "desc": "In-depth knowledge in protecting information systems."},
                {"name": "Cyber Law", "desc": "Education on cybersecurity legislation."}
            ]
        },
        "home": "üè† Home",
        "back": "‚¨ÖÔ∏è Back"
    }
}

# Store user language and current menu state
user_state = {}

def main_menu(chat_id, lang):
    """Display the main menu in the specified language."""
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(data[lang]["menu"][0], data[lang]["menu"][1])  # üëë Universitet haqida, üí≥ Aloqa
    keyboard.row(data[lang]["menu"][2], data[lang]["menu"][3])  # üí∏ Magistratura, üí∞ Bakalavr
    bot.send_message(chat_id, data[lang]["welcome"], reply_markup=keyboard)
    user_state[chat_id] = {"lang": lang, "menu": "main"}
    logging.info(f"Main menu displayed for chat_id: {chat_id}, lang: {lang}")

def sub_menu(chat_id, lang, section):
    """Display a sub-menu for sections with multiple items (e.g., bachelor, master)."""
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    for item in data[lang][section]["items"]:
        keyboard.add(item["name"])
    keyboard.add(data[lang]["back"])
    bot.send_message(chat_id, data[lang][section]["title"], reply_markup=keyboard)
    user_state[chat_id]["menu"] = section
    logging.info(f"Sub-menu '{section}' displayed for chat_id: {chat_id}")

@bot.message_handler(commands=['start'])
def start(message):
    """Handle the /start command to prompt language selection."""
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("O‚Äòzbekcha üá∫üáø", "–†—É—Å—Å–∫–∏–π üá∑üá∫", "English üá¨üáß")
    bot.send_message(message.chat.id,
                     "Tilni tanlang / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:",
                     reply_markup=keyboard)
    logging.info(f"Start command received for chat_id: {message.chat.id}")

@bot.message_handler(func=lambda m: m.text in ["O‚Äòzbekcha üá∫üáø", "–†—É—Å—Å–∫–∏–π üá∑üá∫", "English üá¨üáß"])
def set_language(message):
    """Set the user's language preference and show the main menu."""
    lang_map = {
        "O‚Äòzbekcha üá∫üáø": "uz",
        "–†—É—Å—Å–∫–∏–π üá∑üá∫": "ru",
        "English üá¨üáß": "en"
    }
    chat_id = message.chat.id
    user_state[chat_id] = {"lang": lang_map[message.text], "menu": "main"}
    main_menu(chat_id, user_state[chat_id]["lang"])
    logging.info(f"Language set to {user_state[chat_id]['lang']} for chat_id: {chat_id}")

@bot.message_handler(func=lambda m: True)
def menu_handler(message):
    """Handle menu and sub-menu selections."""
    chat_id = message.chat.id
    if chat_id not in user_state:
        start(message)
        return

    lang = user_state[chat_id]["lang"]
    current_menu = user_state[chat_id]["menu"]

    # Handle main menu selections
    if current_menu == "main":
        if message.text in data[lang]["menu"]:
            if message.text == data[lang]["menu"][0]:  # About
                bot.send_message(chat_id, data[lang]["about"], reply_markup=create_back_keyboard(lang))
                user_state[chat_id]["menu"] = "about"
            elif message.text == data[lang]["menu"][1]:  # Contact
                bot.send_message(chat_id, data[lang]["contact"], reply_markup=create_back_keyboard(lang))
                user_state[chat_id]["menu"] = "contact"
            elif message.text == data[lang]["menu"][2]:  # Master
                sub_menu(chat_id, lang, "master")
            elif message.text == data[lang]["menu"][3]:  # Bachelor
                sub_menu(chat_id, lang, "bachelor")
            logging.info(f"Main menu item '{message.text}' selected for chat_id: {chat_id}")
        else:
            send_invalid_input_message(chat_id, lang)
    # Handle sub-menu selections
    elif current_menu in ["bachelor", "master"]:
        for item in data[lang][current_menu]["items"]:
            if message.text == item["name"]:
                bot.send_message(chat_id, f"{item['name']}:\n{item['desc']}", reply_markup=create_back_keyboard(lang))
                logging.info(f"Sub-menu item '{message.text}' selected for chat_id: {chat_id}")
                return
        if message.text == data[lang]["back"]:
            main_menu(chat_id, lang)
        else:
            send_invalid_input_message(chat_id, lang)
    # Handle back navigation
    elif message.text == data[lang]["back"]:
        main_menu(chat_id, lang)
    else:
        send_invalid_input_message(chat_id, lang)

def create_back_keyboard(lang):
    """Create a keyboard with a single Back button."""
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(data[lang]["back"])
    return keyboard

def send_invalid_input_message(chat_id, lang):
    """Send a message for invalid input."""
    messages = {
        "uz": "Iltimos, menyudan biror variantni tanlang.",
        "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.",
        "en": "Please select an option from the menu."
    }
    bot.send_message(chat_id, messages[lang])
    logging.warning(f"Invalid input received: {messages[lang]} from chat_id: {chat_id}")

if __name__ == "__main__":
    try:
        logging.info("Starting bot polling...")
        bot.polling(none_stop=True)
    except Exception as e:
        logging.error(f"Bot polling failed: {str(e)}")
        raise
